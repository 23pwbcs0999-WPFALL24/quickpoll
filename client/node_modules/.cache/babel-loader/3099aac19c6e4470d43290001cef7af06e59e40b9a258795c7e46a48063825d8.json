{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\quickpoll\\\\client\\\\src\\\\components\\\\PollResults.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useSocket } from '../context/SocketContext';\nimport './PollResults.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PollResults = ({\n  options: initialOptions,\n  pollId\n}) => {\n  _s();\n  const socket = useSocket(); // ✅ pull in the socket instance\n  const [options, setOptions] = useState(initialOptions);\n\n  // Calculate total votes\n  const totalVotes = options.reduce((sum, opt) => sum + opt.votes, 0);\n  useEffect(() => {\n    if (!socket || !pollId) return;\n\n    // Join the room for this poll\n    socket.emit('joinPoll', pollId);\n\n    // Listen for updates\n    socket.on('voteUpdate', updatedPoll => {\n      // updatedPoll should be the full poll object\n      if (updatedPoll.options) {\n        setOptions(updatedPoll.options);\n      }\n    });\n\n    // Cleanup on unmount\n    return () => {\n      socket.off('voteUpdate');\n      socket.emit('leavePoll', pollId);\n    };\n  }, [socket, pollId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-container\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"results-list\",\n      children: options.map((option, idx) => {\n        const pct = totalVotes > 0 ? Math.round(option.votes / totalVotes * 100) : 0;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"option-text\",\n              children: option.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"vote-count\",\n              children: [option.votes, \" votes (\", pct, \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: {\n                width: `${pct}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(PollResults, \"4tb7fa7Uj1G9AeRVU1AMwRqERNM=\", false, function () {\n  return [useSocket];\n});\n_c = PollResults;\nexport default PollResults;\nvar _c;\n$RefreshReg$(_c, \"PollResults\");","map":{"version":3,"names":["React","useEffect","useState","useSocket","jsxDEV","_jsxDEV","PollResults","options","initialOptions","pollId","_s","socket","setOptions","totalVotes","reduce","sum","opt","votes","emit","on","updatedPoll","off","className","children","map","option","idx","pct","Math","round","text","fileName","_jsxFileName","lineNumber","columnNumber","style","width","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/quickpoll/client/src/components/PollResults.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSocket } from '../context/SocketContext';\r\nimport './PollResults.css';\r\n\r\nconst PollResults = ({ options: initialOptions, pollId }) => {\r\n  const socket = useSocket();           // ✅ pull in the socket instance\r\n  const [options, setOptions] = useState(initialOptions);\r\n\r\n  // Calculate total votes\r\n  const totalVotes = options.reduce((sum, opt) => sum + opt.votes, 0);\r\n\r\n  useEffect(() => {\r\n    if (!socket || !pollId) return;\r\n\r\n    // Join the room for this poll\r\n    socket.emit('joinPoll', pollId);\r\n\r\n    // Listen for updates\r\n    socket.on('voteUpdate', (updatedPoll) => {\r\n      // updatedPoll should be the full poll object\r\n      if (updatedPoll.options) {\r\n        setOptions(updatedPoll.options);\r\n      }\r\n    });\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      socket.off('voteUpdate');\r\n      socket.emit('leavePoll', pollId);\r\n    };\r\n  }, [socket, pollId]);\r\n\r\n  return (\r\n    <div className=\"results-container\">\r\n      <ul className=\"results-list\">\r\n        {options.map((option, idx) => {\r\n          const pct = totalVotes > 0\r\n            ? Math.round((option.votes / totalVotes) * 100)\r\n            : 0;\r\n\r\n          return (\r\n            <li key={idx} className=\"result-item\">\r\n              <div className=\"option-info\">\r\n                <span className=\"option-text\">{option.text}</span>\r\n                <span className=\"vote-count\">\r\n                  {option.votes} votes ({pct}%)\r\n                </span>\r\n              </div>\r\n              <div className=\"progress-bar-container\">\r\n                <div\r\n                  className=\"progress-bar\"\r\n                  style={{ width: `${pct}%` }}\r\n                ></div>\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PollResults;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}